Flask==2.3.3
Flask-CORS==4.0.0
mysql-connector-python==8.1.0
openai==0.28.1
PyJWT==2.8.0
Werkzeug==2.3.7
python-dotenv==1.0.0



guide ..

# Recipe Recommender App

A modern web application that suggests recipes based on available ingredients using AI-powered recommendations.

## üåü Features

- **Smart Recipe Suggestions**: Uses OpenAI GPT to generate personalized recipe recommendations
- **Ingredient Management**: Track and manage your available ingredients
- **User Authentication**: Secure login and registration system
- **Favorites System**: Save your favorite recipes for quick access
- **Search History**: Keep track of your recipe searches
- **Modern UI**: Beautiful, responsive design with glassmorphism effects
- **Mobile Friendly**: Works seamlessly on all devices

## üõ†Ô∏è Tech Stack

### Frontend
- **HTML5/CSS3/JavaScript**: Pure vanilla frontend
- **Jost Font**: Modern typography
- **Lord Icons**: Beautiful animated icons
- **Glassmorphism Design**: Modern UI effects

### Backend
- **Python Flask**: Web framework
- **MySQL**: Database for user data and recipes
- **OpenAI API**: AI-powered recipe generation
- **JWT**: Secure authentication
- **Flask-CORS**: Cross-origin resource sharing

## üìã Prerequisites

- Python 3.7 or higher
- MySQL Server 5.7 or higher
- OpenAI API key (get from [OpenAI Platform](https://platform.openai.com/))

## üöÄ Quick Setup

### 1. Clone or Download Files

Create a new directory and save these files:
- `app_improved.py` (main Flask application)
- `config.py` (configuration settings)
- `models.py` (database models)
- `services.py` (OpenAI integration)
- `requirements.txt` (Python dependencies)
- `database_setup.sql` (database schema)
- `setup.py` (automated setup script)
- `index.html` (frontend)
- `api.js` (frontend API integration)

### 2. Automated Setup

Run the setup script:
```bash
python setup.py
```

This will:
- Check Python version
- Install required packages
- Create `.env` configuration file
- Test MySQL connection
- Setup database tables
- Configure OpenAI API key

### 3. Manual Setup (Alternative)

If you prefer manual setup:

#### Install Dependencies
```bash
pip install -r requirements.txt
```

#### Configure Environment
Create a `.env` file:
```env
MYSQL_HOST=localhost
MYSQL_DATABASE=recipe_recommender
MYSQL_USER=root
MYSQL_PASSWORD=your_mysql_password

OPENAI_API_KEY=your_openai_api_key_here

SECRET_KEY=your_secret_key_change_this_in_production
FLASK_ENV=development
FLASK_DEBUG=True

JWT_EXPIRATION_DAYS=7
```

#### Setup Database
1. Create MySQL database:
```sql
CREATE DATABASE recipe_recommender;
```

2. Run the setup script:
```bash
mysql -u root -p recipe_recommender < database_setup.sql
```

### 4. Start the Application

```bash
python app_improved.py
```

The backend will start on `http://localhost:5000`

### 5. Open Frontend

Open `index.html` in your browser or serve it with a local server:
```bash
# Using Python's built-in server
python -m http.server 8080

# Then open http://localhost:8080
```

## üì° API Endpoints

### Authentication
- `POST /api/register` - User registration
- `POST /api/login` - User login

### Recipes
- `POST /api/recipes/search` - Search recipes by ingredients

### Ingredients
- `GET /api/ingredients` - Get user's ingredients
- `POST /api/ingredients` - Add ingredient
- `DELETE /api/ingredients/<ingredient>` - Remove ingredient

### Favorites
- `GET /api/favorites` - Get favorite recipes
- `POST /api/favorites` - Add recipe to favorites

### User Data
- `GET /api/profile` - Get user profile
- `GET /api/history` - Get search history
- `GET /api/stats` - Get user statistics

## üîß Configuration

### MySQL Configuration
Update your MySQL credentials in the `.env` file:
```env
MYSQL_HOST=localhost
MYSQL_USER=your_username
MYSQL_PASSWORD=your_password
MYSQL_DATABASE=recipe_recommender
```

### OpenAI API Setup
1. Get an API key from [OpenAI Platform](https://platform.openai.com/)
2. Add it to your `.env` file:
```env
OPENAI_API_KEY=sk-your-api-key-here
```

### Security Configuration
Change the secret key in production:
```env
SECRET_KEY=your-strong-secret-key-for-production
```

## üèóÔ∏è Database Schema

The application creates these tables:
- `users` - User accounts and authentication
- `user_ingredients` - User's available ingredients
- `recipes` - Recipe database
- `user_favorites` - User's favorite recipes
- `search_history` - Recipe search history

## üé® Frontend Features

### Modern UI Elements
- Glassmorphism effects with backdrop blur
- Smooth animations and transitions
- Responsive grid layouts
- Interactive Lord Icons
- Gradient backgrounds

### User Experience
- Real-time form validation
- Loading states for API calls
- Toast notifications for feedback
- Mobile-responsive design
- Intuitive navigation

## üîç How It Works

1. **User Registration/Login**: Secure authentication with JWT tokens
2. **Ingredient Input**: Users add available ingredients to their pantry
3. **AI Recipe Generation**: OpenAI generates personalized recipe suggestions
4. **Recipe Display**: Recipes shown as interactive cards with details
5. **Favorites & History**: Users can save recipes and view search history

## üêõ Troubleshooting

### Common Issues

#### Database Connection Error
- Ensure MySQL server is running
- Check credentials in `.env` file
- Verify database exists: `CREATE DATABASE recipe_recommender;`

#### OpenAI API Error
- Verify API key is correct and active
- Check you have sufficient API credits
- Ensure key starts with `sk-`

#### CORS Issues
- Backend includes Flask-CORS configuration
- Ensure frontend makes requests to correct backend URL

#### Port Already in Use
Change the port in `app_improved.py`:
```python
app.run(debug=True, host='0.0.0.0', port=5001)  # Change port here
```

## üöÄ Deployment

### Production Checklist
- [ ] Change `SECRET_KEY` to a strong, random value
- [ ] Set `FLASK_ENV=production`
- [ ] Use a production MySQL server
- [ ] Configure proper CORS origins
- [ ] Set up HTTPS
- [ ] Monitor OpenAI API usage

### Environment Variables for Production
```env
FLASK_ENV=production
FLASK_DEBUG=False
SECRET_KEY=your-super-secure-production-key
MYSQL_HOST=your-production-db-host
```

## üì± Usage

1. **Register**: Create a new account with name, email, and password
2. **Add Ingredients**: Build your virtual pantry with available ingredients
3. **Search Recipes**: Enter ingredients to get AI-generated recipe suggestions
4. **Save Favorites**: Click the heart icon to save recipes you love
5. **View History**: Check your past searches in the history section

## ü§ù Contributing

This is a complete, functional application ready for use or further development. You can enhance it by:

- Adding recipe rating system
- Implementing recipe sharing features
- Adding nutritional information
- Creating meal planning functionality
- Adding recipe categories and filters

## üìÑ License

This project is created for educational and personal use. Make sure to comply with OpenAI's usage policies when using their API.

## üÜò Support

If you encounter issues:
1. Check the troubleshooting section above
2. Verify all prerequisites are installed
3. Ensure environment variables are correctly set
4. Check console logs for detailed error messages

---

**Happy Cooking with AI! üç≥‚ú®**